# -*- coding: utf-8 -*-
"""weather fetcher section 3.2 .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1wFh0cPjHKf7ZI9iP46rPAJjCUB060rs2
"""

def refined_safe_weather_data_fetch(city):
    """
    Fetch weather data with basic error handling - Week 8 style

    >>> refined_safe_weather_data_fetch("")
    'Error: City name cannot be empty'
    >>> refined_safe_weather_data_fetch("InvalidCity123")  # doctest: +SKIP
    'Error: Could not connect to weather service'
    >>> refined_safe_weather_data_fetch("London")
    {'city': 'London', 'temperature_celsius': 22, 'condition': 'Sunny', 'humidity_percent': 55}
    """
    try:
        # Basic input validation - check if the city name is empty
        if not city:
            return "Error: City name cannot be empty"

        # Simulate a predefined list of valid cities
        valid_cities = ["London", "Paris", "New York"]

        # Simulate failure if the city is not in the list
        if city not in valid_cities:
            raise Exception("Invalid city or connection failure")

        # Simulated weather data dictionary
        weather_data = {
            "city": city,
            "temperature_celsius": 22,
            "condition": "Sunny",
            "humidity_percent": 55
        }

        return weather_data

    except:
        return "Error: Could not connect to weather service"


# Run doctests and show output when script is executed
if __name__ == "__main__":
    import doctest
    doctest.testmod()

    # Manual tests for demonstration
    print("Manual Test Outputs:")
    print(refined_safe_weather_data_fetch(""))              # Should return error for empty city
    print(refined_safe_weather_data_fetch("InvalidCity123")) # Should return error for invalid city
    print(refined_safe_weather_data_fetch("London"))         # Should return weather dictionary